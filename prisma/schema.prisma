// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator dbml {
  provider            = "prisma-dbml-generator"
  output              = "./dbml"
  outputName          = "schema.dbml"
  projectName         = "PrescrevaFarma"
  projectDatabaseType = "postgresql"
}

enum Gender {
  WOMAN
  MEN
  OTHER
}

model User {
  id                Int            @id @default(autoincrement())
  email             String         @unique
  crf               String         @db.VarChar(4)
  crfState          String         @db.VarChar(2)
  cep               String         @db.VarChar(8)
  street            String         @db.VarChar(100)
  district          String         @db.VarChar(50)
  complement        String?        @db.VarChar(150)
  number            String         @db.VarChar(10)
  city              String         @db.VarChar(50)
  state             String         @db.VarChar(2)
  tel               String?        @db.VarChar(10)
  phone             String         @db.VarChar(11)
  professionalPhone String         @db.VarChar(11)
  password          String
  name              String         @db.VarChar(100)
  cpf               String         @db.VarChar(11)
  birthDate         DateTime       @map("birth_date") @db.Date
  gender            Gender
  nacionality       String         @db.VarChar(50)
  logo              String?
  token             String?
  isAdmin           Boolean        @default(false)
  refreshToken      RefreshToken[]
  patients          Patient[]
  prescriptions     Prescription[]
  forwarders        Forward[]
  appointments      Appointment[]
  Avaliation        Avaliation[]

  @@map("users")
}

model Patient {
  id             Int            @id @default(autoincrement())
  email          String?
  name           String         @db.VarChar(100)
  birthDate      DateTime       @map("birth_date") @db.Date
  gender         Gender
  tel            String?        @db.VarChar(10)
  nacionality    String         @db.VarChar(50)
  cpf            String         @db.VarChar(11)
  phone          String         @db.VarChar(11)
  professionalId Int            @map("professional_id")
  professional   User           @relation(fields: [professionalId], references: [id])
  appointments   Appointment[]
  prescriptions  Prescription[]
  forwarders     Forward[]

  @@map("patients")
}

enum MedicineType {
  MEDICINE
  HERBAL_MEDICINES
}

model Medicine {
  id                    Int                     @id @default(autoincrement())
  name                  String
  subGroup              String                  @map("sub_group")
  pharmaceuticalForm    String                  @map("pharmaceutical_form")
  maximumDosage         String?                 @map("maximum_dosage")
  therapeuticIndication String                  @map("therapeutic_indication") @db.Text
  type                  MedicineType            @default(MEDICINE)
  prescriptionMedicines PrescriptionMedicines[]

  @@map("medicines")
}

model Prescription {
  id                        Int                     @id @default(autoincrement())
  professionalId            Int                     @map("professional_id")
  patientId                 Int                     @map("patient_id")
  aditionalInfos            String?                 @map("aditional_infos") @db.Text
  nonPharmacologicalTherapy String?                 @map("non_pharmacological_therapy") @db.Text
  createdAt                 DateTime                @default(now())
  professional              User                    @relation(fields: [professionalId], references: [id])
  patient                   Patient                 @relation(fields: [patientId], references: [id])
  prescriptionMedicines     PrescriptionMedicines[]

  @@map("prescriptions")
}

model PrescriptionMedicines {
  id                 Int          @id @default(autoincrement())
  prescriptionId     Int          @map("prescription_id")
  medicineId         Int          @map("medicine_id")
  concentration      String
  instructions       String       @db.VarChar(255)
  administrationForm String       @db.VarChar(20)
  prescription       Prescription @relation(fields: [prescriptionId], references: [id])
  medicine           Medicine     @relation(fields: [medicineId], references: [id])

  @@map("prescription_medicines")
}

model Forward {
  id                Int      @id @default(autoincrement())
  professionalId    Int      @map("professional_id")
  patientId         Int      @map("patient_id")
  medicalExperience String   @db.VarChar(50)
  forwardReason     String   @db.Text
  showFooter        Boolean  @default(false)
  createdAt         DateTime @default(now())
  professional      User     @relation(fields: [professionalId], references: [id])
  patient           Patient  @relation(fields: [patientId], references: [id])

  @@map("forwarders")
}

model Appointment {
  id             Int      @id @default(autoincrement())
  start          DateTime
  end            DateTime
  professionalId Int      @map("professional_id")
  patientId      Int      @map("patient_id")
  professional   User     @relation(fields: [professionalId], references: [id])
  patient        Patient  @relation(fields: [patientId], references: [id])

  @@map("appointments")
}

model Avaliation {
  id             Int     @id @default(autoincrement())
  grade          Int
  comment        String? @db.Text
  professionalId Int     @map("professional_id")
  professional   User    @relation(fields: [professionalId], references: [id])
}

model RefreshToken {
  id     String @id @default(uuid())
  userId Int    @map("user_id")
  user   User   @relation(fields: [userId], references: [id])

  @@map("refresh_tokens")
}

model ForgotPasswordToken {
  id     String @id @default(uuid())
  userId Int
  token  String

  @@map("forgot_password_tokens")
}

model TokenBlacklist {
  id        Int      @id @default(autoincrement())
  token     String
  createdAt DateTime @default(now())

  @@index([token])
  @@map("tokens_blacklist")
}
